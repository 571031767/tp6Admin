<?php

namespace app\admin\controller;

use app\model\Content;
use think\facade\Session;
use think\facade\View;
use think\Request;
use think\exception\ValidateException;
//qq571031767  微博：@沙坪坝韩宇
class Setting extends Common
{
    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
        $this->model_id = 4; //软件
    }




    /**
     * 显示资源列表
     *
     * @return \think\Response
     */
    public function index()
    {
        $id = \think\facade\Request::param("id");
        $title = \think\facade\Request::param("title");
        $status = \think\facade\Request::param("status");
        if($id){
            $map["id"] = $id;
        }
        if($title){
            if(isset($map)){
                unset($map);
            }
            $map= [
                ['title', 'like', "%{$title}%"],
            ];
        }
        if($status){
            $map["status"] = $status;
        }
        if(!isset($map)){
            $map=1;
        }

        $list = \app\model\Content::with("model")
            ->where("model_id",$this->model_id)
            ->where($map)
            ->order("status DESC ,id DESC")
            ->paginate();
        View::assign("list",$list);
        View::assign("title","站点设置");
        return view();
    }



    /**
     * 显示创建资源表单页.
     *
     * @return \think\Response
     */
    public function create()
    {
        $data = \think\facade\Request::post();
        try {
            $result = validate(\app\validate\Soft::class)->check($data);

            if (true !== $result) {
                // 验证失败 输出错误信息
                $return["code"] = 201;
                $return["msg"] = "数据格式错误";
                return json($return);
            }

        } catch (ValidateException $e) {
            // 验证失败 输出错误信息
            $return["code"] = 201;
            $return["msg"] = $e->getError();
            return json($return);
        }
        if(!$data["author"]){
            if(Session::get("index_user.name")){
                $data["author"] = Session::get("index_user.name");
            }else{
                $data["author"] = "米醋儿-佚名";
            }
        }

        unset($data["file"]);
//        p($data);die;

        //关联新增
        $soft = new \app\model\Soft();
        $soft->downloadurl = $data["downloadurl"];
        $soft->info = $data["info"];


        $content = new Content;
        $content->title = $data["title"];
        $content->info = $data["info"];
        $content->cate_id = $data["cate_id"];
        $content->author = $data["author"];
        $content->prefimg = $data["prefimg"];
        $content->model_id = $this->model_id;
        $content->hits = $data["hits"];
        $content->tags = $data["tags"];

        $soft->cont = $content; //
        $res = $soft->together(['cont'])->save();
        //关联新增结束

        if($res){
            return json(["code"=>200,"msg"=>"成功"]);
        }else{
            return json(["code"=>204,"msg"=>"请稍后再试"]);
        }


    }

    /**
     * 保存新建的资源
     *
     * @param  \think\Request  $request
     * @return \think\Response
     */
    public function save(Request $request)
    {

    }

    /**
     * 显示编辑资源表单页.
     *
     * @param  int  $id
     * @return \think\Response
     */
    public function edit($id)
    {
        //分类显示
        $cate = \app\model\ArticleCate::where(1)
            ->order("status DESC ,id DESC")
            ->select()->toArray();
        $cate = unlimitforlevel($cate);
        View::assign("cate",$cate);
        $content = Content::find($id);
        $article = \app\model\Soft::where("id",$content["contentid"])->find();
        View::assign("content",$content);
        View::assign("article",$article);
        View::assign("title","修改软件");
        return \view();
    }

    /**
     * 保存更新的资源
     *
     * @param  \think\Request  $request
     * @param  int  $id
     * @return \think\Response
     */
    public function update(Request $request)
    {
        $data = \think\facade\Request::post();
        try {
            $result = validate(\app\validate\Video::class)->check($data);

            if (true !== $result) {
                // 验证失败 输出错误信息
                $return["code"] = 201;
                $return["msg"] = "数据格式错误";
                return json($return);
            }

        } catch (ValidateException $e) {
            // 验证失败 输出错误信息
            $return["code"] = 201;
            $return["msg"] = $e->getError();
            return json($return);
        }
        if(!$data["author"]){
            if(Session::get("index_user.name")){
                $data["author"] = Session::get("index_user.name");
            }else{
                $data["author"] = "米醋儿-佚名";
            }
        }
        unset($data["file"]);
        $contentid = $data["contentid"];
        $articleid = $data["articleid"];
        $downloadurl = $data["downloadurl"];
        $sort = $data["sort"];
        unset($data["sort"]);
        unset($data["contentid"]);
        unset($data["downloadurl"]);
        unset($data["articleid"]);


        $res = \app\model\Content::where("id",$contentid)->save($data);
        $article["title"] = $data["title"];
        $article["cate_id"] = $data["cate_id"];
        $article["author"] = $data["author"];
        $article["info"] = $data["info"];
        $article["downloadurl"] = $downloadurl;
        $article = \app\model\Soft::where("id",$articleid)->save($article);


        if($res || $article){

            return json(["code"=>200,"msg"=>"成功"]);
        }else{
            return json(["code"=>204,"msg"=>"请稍后再试"]);
        }
    }

    /**
     * 删除指定资源
     *
     * @param  int  $id
     * @return \think\Response
     */
    public function delete($id)
    {
        $content = Content::find($id);
        $res = Content::where("id",$id)->delete();
        if($res){
            \app\model\Soft::where("id",$content['contentid'])->delete();
            return json(["code"=>200,"msg"=>"成功"]);
        }else{
            return json(["code"=>204,"msg"=>"稍后再试"]);
        }
    }
}
